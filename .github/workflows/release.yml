on:
  push:

permissions:
  contents: write

jobs:
  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: "^(main)$"
# test à voir plus tard
  test:
    name: Spring test
    runs-on: ubuntu-latest
    continue-on-error: true
    services:
      postgres:
        image: postgres

  # Va récupérer les informations nécessaires à la connexion à la BDD à partir des secrets que j'ai configuré.
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 21
      # - name: Build with Maven
      #   run: mvn clean install
      # - name: Run tests
      #   run: mvn test

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: '21'
      - name: Build with Maven
        run: mvn clean install

      # - name: Print version
      #   run : |
      #     echo "${{ needs.get-version.outputs.version }}"
      #     echo "${{ needs.get-version.outputs.changelogs }}"
      #     echo "${{ needs.get-version.outputs.is-prerelease }}"
      #     echo "${{ needs.get-version.outputs.will-release }}"
     # - name: setup java
       # uses: actions/setup-java@v4
       # with:
         # distribution: "temurin"
         # java-version: 17
     # - name: Setup Gradle
       # uses: gradle/actions/setup-gradle@v4
     # - name: Checkout
       # uses: actions/checkout@v4
     # - name: Build with Gradle
       # env:
         # VERSION: "${{ needs.get-version.outputs.version }}"
       # run: ./gradlew bootjar
     # - uses: actions/upload-artifact@v4
       # with:
         # name: spring
         # path: build/libs/
  # Job de release
 # release:
   # name: Release
   # runs-on: ubuntu-latest
   # needs: [get-version, build]
   # steps:
     # - name: Download artifacts
       # uses: actions/download-artifact@v4.1.8
       # with:
         # name: spring
         # path: build/
     # - name: Create Github Release
       # env:
         # VERSION: "${{ needs.get-version.outputs.version }}"
          #github nous donne le repository dans lequel on est, = nomD'Utilisateur/NomDuRepo
         # REPO: "${{ github.repository }}"
         # COMMIT: "${{ github.sha }}"
         # GH_TOKEN: "${{ github.token }}"
       # run: |
         # gh release create --repo $REPO --target $COMMIT $VERSION build/*

